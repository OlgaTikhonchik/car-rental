{"version":3,"file":"static/js/617.4595cdc3.chunk.js","mappings":"uRAEaA,EAAOC,EAAAA,EAAAA,EAAH,gMAaJC,EAASD,EAAAA,EAAAA,IAAH,oGAUNE,GAJcF,EAAAA,EAAAA,IAAH,qDAIIA,EAAAA,EAAAA,IAAH,2LAoCZG,GAxBSH,EAAAA,EAAAA,OAAH,8fAwBSA,EAAAA,EAAAA,IAAH,+C,8ECiLzB,EA5FkB,WAEhB,IAAMI,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAC5BC,QAAQC,IAAI,UAAWJ,GACvB,IAAMK,GAAQJ,EAAAA,EAAAA,IAAYK,EAAAA,IACpBC,GAAYN,EAAAA,EAAAA,IAAYO,EAAAA,IAIxBC,GAAWR,EAAAA,EAAAA,IAAYS,EAAAA,IAC7BP,QAAQC,IAAI,WAAYK,GACxB,IAAME,EAAmBX,EAAQY,QAAO,SAAAC,GAAG,OAAIJ,EAASK,SAASD,EAAIE,GAA1B,IAE3CZ,QAAQC,IAAI,mBAAoBO,GAChC,IAAMK,GAAcf,EAAAA,EAAAA,KAAY,SAAAgB,GAAK,OAAIA,EAAML,MAAV,IACrCT,QAAQC,IAAI,cAAeY,GAM3B,IAAME,GAAWC,EAAAA,EAAAA,MAMXC,GAAWnB,EAAAA,EAAAA,IAAYoB,EAAAA,IAkC7B,OA1BAC,EAAAA,EAAAA,YAAU,WACRJ,GAASK,EAAAA,EAAAA,KAGV,GAAE,CAACL,KAEJI,EAAAA,EAAAA,YAAU,WACJF,GACFF,GAASM,EAAAA,EAAAA,KAEZ,GAAE,CAACN,EAAUE,KAiBZ,UAACrB,EAAD,YACE,SAAC0B,EAAA,EAAD,WACE,2BAAO,gBAGRlB,IAAcF,IAAS,SAACqB,EAAA,EAAD,KAExB,yBAC+B,IAA5Bf,EAAiBgB,QAChB,iCACE,SAAChC,EAAD,UAAM,wDACN,SAACE,EAAD,CAAQ+B,IAAKC,EAASC,IAAI,aAG5B,+BACE,SAAChC,EAAD,UACGa,EAAiBoB,KAAI,SAAAlB,GAAG,OACvB,SAACmB,EAAA,EAAD,CAA6BC,QAASpB,GAAjBA,EAAIE,GADF,YAYtC,C","sources":["pages/Favorites/Favorite.styled.jsx","pages/Favorites/Favorites.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  text-align: center;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  font-size: 50px;\n  font-weight: 700;\n  color: #523825;\n\n  :hover {\n    color: #815738;\n  }\n`;\n\nexport const Images = styled.img`\n  display: block;\n  width: 100%;\n  height: 100%;\n  border-radius: 20px;\n`;\nexport const CatalogItem = styled.div`\n  padding: 0;\n  margin: 0;\n`;\nexport const FavoriteList = styled.div`\n  display: flex;\n\n  flex-wrap: wrap;\n  padding: 0;\n  justify-content: center;\n  gap: 29px;\n  flex-wrap: wrap;\n  margin-top: 50px;\n  flex-direction: row;\n`;\n\nexport const Button = styled.button`\n  width: 274px;\n  padding: 12px 0;\n  color: #fff;\n  font-family: Manrope;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 20px;\n  border-radius: 12px;\n  background-color: #3470ff;\n  border: none;\n  cursor: pointer;\n  outline: none;\n  margin-top: auto;\n  box-shadow: 0px 3.43693px 3.43693px 0px rgba(0, 0, 0, 0.25);\n  margin-top: 20px;\n\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background-color: #0b44cd;\n  }\n`;\n\nexport const FavoriteWrap = styled.div`\n  min-height: 800px;\n`;\n","// import { useDispatch, useSelector } from 'react-redux';\n// import carsSet from '../../images/carsSet.png';\n\n// import Filter from 'components/Filter/Filter';\n\n// import {\n//   Button,\n//   CatalogItem,\n//   FavoriteList,\n//   Images,\n//   Text,\n// } from './Favorite.styled';\n// import { Helmet } from 'react-helmet';\n// import CatalogItemCar from 'components/CatalogItemCar/CatalogItemCar';\n// import { getAllCars } from 'redux/operations';\n// import { useEffect, useState } from 'react';\n// import { clearCarsData } from 'redux/carsSlice';\n// import { selectCars, selectFavorite, selectIsLoading } from 'redux/selectors';\n\n// const Favorites = () => {\n//   const cars = useSelector(selectCars);\n//   const favorite = useSelector(selectFavorite);\n//   console.log('favorite', favorite);\n//   const selectedFavorite = cars.filter(car => favorite.includes(car.id));\n//   console.log('selectedFavorite', selectedFavorite);\n//   const [page, setPage] = useState(1);\n//   const [showButton, setShowButton] = useState(false);\n//   const isLoading = useSelector(selectIsLoading);\n//   const [hasMore, setHasMore] = useState(true);\n\n//   const dispatch = useDispatch();\n//   //const filtred = useSelector(selectFiltredCars);\n//   // const render = filtred ? filtred : selectedFavorite;\n//   const handleLoadClick = () => {\n//     setPage(page => page + 1);\n//   };\n\n//   useEffect(() => {\n//     dispatch(clearCarsData());\n//     setShowButton(false);\n//     setHasMore(false);\n//   }, [dispatch]);\n\n//   useEffect(() => {\n//     dispatch(getAllCars(page));\n//     setShowButton(true);\n\n//     setHasMore(true);\n//   }, [dispatch, page]);\n\n//   // const render = onFilter ? filtred : selectedFavorite;\n\n//   return (\n//     <>\n//       <Helmet>\n//         <title>Favorites</title>\n//       </Helmet>\n\n//       <Filter />\n\n//       <div>\n//         {selectedFavorite.length === 0 ? (\n//           <>\n//             <Text>You have not added any cars to your favorites yet.</Text>\n//             <Images src={carsSet} alt=\"cars\" />\n//           </>\n//         ) : (\n//           <FavoriteList>\n//             {selectedFavorite.map(\n//               ({\n//                 id,\n//                 model,\n//                 make,\n//                 year,\n//                 rentalPrice,\n//                 address,\n//                 rentalCompany,\n//                 functionalities,\n//                 type,\n//                 img,\n//                 fuelConsumption,\n//                 engineSize,\n//                 description,\n//                 accessories,\n//                 rentalConditions,\n//                 mileage,\n//               }) => (\n//                 <CatalogItem key={id}>\n//                   <CatalogItemCar\n//                     key={id}\n//                     model={model}\n//                     make={make}\n//                     year={year}\n//                     rentalPrice={rentalPrice}\n//                     address={address}\n//                     rentalCompany={rentalCompany}\n//                     functionalities={functionalities}\n//                     id={id}\n//                     type={type}\n//                     img={img}\n//                     fuelConsumption={fuelConsumption}\n//                     engineSize={engineSize}\n//                     description={description}\n//                     accessories={accessories}\n//                     rentalConditions={rentalConditions}\n//                     mileage={mileage}\n//                   />\n//                 </CatalogItem>\n//               )\n//             )}\n//           </FavoriteList>\n//         )}\n//       </div>\n//       {showButton && selectedFavorite.length !== 0 && !isLoading && hasMore && (\n//         <Button onClick={handleLoadClick}>Load more</Button>\n//       )}\n//     </>\n//   );\n// };\n\n// export default Favorites;\n//////\nimport { useDispatch, useSelector } from 'react-redux';\nimport carsSet from '../../images/carsSet.png';\n\nimport { FavoriteList, FavoriteWrap, Images, Text } from './Favorite.styled';\nimport { Helmet } from 'react-helmet';\nimport CatalogItemCar from 'components/CatalogItemCar/CatalogItemCar';\nimport { getAllCarsWithoutPage } from 'redux/operations';\nimport { useEffect } from 'react';\nimport { clearCarsData } from 'redux/carsSlice';\nimport {\n  selectAllCars,\n  //selectCars,\n  selectError,\n  selectFavorite,\n  //selectFavoriteCars,\n  //selectFiltredCars,\n  // selectFavoriteCars,\n  // selectFiltredCars,\n  //selectFiltredFavoriteCars,\n  selectIsLoading,\n  selectOnFilter,\n} from 'redux/selectors';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Favorites = () => {\n  //const cars = useSelector(selectCars);\n  const allCars = useSelector(selectAllCars);\n  console.log('allCars', allCars);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  // const filtred = useSelector(selectFiltredCars);\n  //const filtred = useSelector(selectFiltredCars);\n  //console.log('filtred', filtred);\n  const favorite = useSelector(selectFavorite);\n  console.log('favorite', favorite);\n  const selectedFavorite = allCars.filter(car => favorite.includes(car.id));\n  //const selectedFavorite = filtred.filter(car => favorite.includes(car.id));\n  console.log('selectedFavorite', selectedFavorite);\n  const storeFilter = useSelector(store => store.filter);\n  console.log('storeFilter', storeFilter);\n  // const [page, setPage] = useState(1);\n  // const [showButton, setShowButton] = useState(false);\n  // const isLoading = useSelector(selectIsLoading);\n  // const [hasMore, setHasMore] = useState(true);\n\n  const dispatch = useDispatch();\n\n  // const filtredFavorites = useSelector(selectFiltredFavoriteCars);\n  // console.log('filtredFavorites', filtredFavorites);\n  // const favorites = useSelector(selectFavoriteCars);\n  // console.log('favorites', favorites);\n  const onFilter = useSelector(selectOnFilter);\n  //const render = selectedFavorite ? selectedFavorite : filtred;\n\n  // console.log('onFilter', onFilter);\n  // const handleLoadClick = () => {\n  //   setPage(page => page + 1);\n  // };\n\n  useEffect(() => {\n    dispatch(clearCarsData());\n    // setShowButton(false);\n    // setHasMore(false);\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (onFilter) {\n      dispatch(getAllCarsWithoutPage());\n    }\n  }, [dispatch, onFilter]);\n\n  // useEffect(() => {\n  //   dispatch(getAllCarsWithoutPage());\n  // }, [dispatch]);\n\n  // useEffect(() => {\n  //   dispatch(getAllCars());\n  //   // setShowButton(true);\n\n  //   // setHasMore(true);\n  // }, [dispatch]);\n\n  //const render = selectedFavorite ? selectedFavorite : filtred;\n  //console.log('render', render);\n\n  return (\n    <FavoriteWrap>\n      <Helmet>\n        <title>Favorites</title>\n      </Helmet>\n      {/* {selectedFavorite.length !== 0 && <Filter />} */}\n      {isLoading && !error && <Loader />}\n\n      <div>\n        {selectedFavorite.length === 0 ? (\n          <>\n            <Text>You have not added any cars to your favorites yet.</Text>\n            <Images src={carsSet} alt=\"cars\" />\n          </>\n        ) : (\n          <>\n            <FavoriteList>\n              {selectedFavorite.map(car => (\n                <CatalogItemCar key={car.id} dataCar={car} />\n              ))}\n            </FavoriteList>\n          </>\n        )}\n      </div>\n      {/* {showButton && favorite.length !== 0 && !isLoading && hasMore && (\n        <Button onClick={handleLoadClick}>Load more</Button>\n      )} */}\n    </FavoriteWrap>\n  );\n};\n\nexport default Favorites;\n"],"names":["Text","styled","Images","FavoriteList","FavoriteWrap","allCars","useSelector","selectAllCars","console","log","error","selectError","isLoading","selectIsLoading","favorite","selectFavorite","selectedFavorite","filter","car","includes","id","storeFilter","store","dispatch","useDispatch","onFilter","selectOnFilter","useEffect","clearCarsData","getAllCarsWithoutPage","Helmet","Loader","length","src","carsSet","alt","map","CatalogItemCar","dataCar"],"sourceRoot":""}